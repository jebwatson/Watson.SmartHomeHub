@inject NavigationManager _navigationManager
@using Microsoft.AspNetCore.SignalR.Client
@implements IAsyncDisposable

<RadzenDataGrid @ref="_devicesGrid" AllowSorting="true" Data="@_devices" TItem="Device">
    <Columns>
        <RadzenDataGridColumn Width="50px" TItem="Device" Title="#" Sortable="false" TextAlign="TextAlign.Center">
            <Template Context="data">
                @(_devices.IndexOf(data) + 1)
            </Template>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn Width="200px" TItem="Device" Property="Id" Title="Device ID">
            <Template Context="data">
                <RadzenButton ButtonStyle="ButtonStyle.Info" Icon="help" Click="@(() => OpenDevice(data.Id))" Text="@data.Id?.ToString()"/>
            </Template>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn Width="200px" TItem="Device" Property="Name" Title="Device Name"/>
        <RadzenDataGridColumn TItem="Device" Property="Label" Title="Device Label"/>
        <RadzenDataGridColumn TItem="Device" Property="Type" Title="Device Type"/>
    </Columns>
</RadzenDataGrid>

@code {
    private RadzenDataGrid<Device> _devicesGrid;
    private IList<Device> _devices = new List<Device>();
    private HubConnection? _hubConnection;

    async Task OpenDevice(string? deviceId)
    {
        Console.WriteLine("Device Clicked");
    }

    protected override async Task OnInitializedAsync()
    {
        _hubConnection = new HubConnectionBuilder()
            .WithUrl(_navigationManager.ToAbsoluteUri("/devicehub"))
            .Build();

        _hubConnection.On<DeviceCollection>("GetDevices", deviceCollection =>
            {
            _devices.Clear();
            _devices = deviceCollection.Devices.ToList();
            StateHasChanged();
            });

        await _hubConnection.StartAsync();
        await _hubConnection.SendAsync("SendDeviceQuery");
    }

    private async Task Send()
    {
        await _hubConnection.SendAsync("SendDeviceQuery");
    }

    private bool IsConnected =>
        _hubConnection?.State == HubConnectionState.Connected;

    public async ValueTask DisposeAsync()
    {
        if (_hubConnection is not null)
        {
            await _hubConnection.DisposeAsync();
        }
    }

}