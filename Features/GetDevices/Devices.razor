@page "/devices"
@inject NavigationManager _navigationManager
@inject DialogService _dialogService
@using Microsoft.AspNetCore.SignalR.Client
@using Watson.SmartHomeHub.Features.ShowDeviceDetails
@implements IAsyncDisposable

<RadzenDataGrid @ref="_devicesGrid" AllowSorting="true" Data="@_deviceCollection.Devices.ToList()" TItem="Device">
    <Columns>
        <RadzenDataGridColumn Width="50px" TItem="Device" Title="#" Sortable="false" TextAlign="TextAlign.Center">
            <Template Context="data">
                @(_deviceCollection.Devices.ToList().IndexOf(data) + 1)
            </Template>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn Width="200px" TItem="Device" Property="Id" Title="Device ID">
            <Template Context="data">
                <RadzenButton ButtonStyle="ButtonStyle.Info" Icon="help" Click="@(() => ShowDeviceDetails(data))" Text="@data.Id?.ToString()"/>
            </Template>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn Width="200px" TItem="Device" Property="Name" Title="Device Name"/>
        <RadzenDataGridColumn TItem="Device" Property="Label" Title="Device Label"/>
        <RadzenDataGridColumn TItem="Device" Property="Type" Title="Device Type"/>
    </Columns>
</RadzenDataGrid>

@code {
    private RadzenDataGrid<Device> _devicesGrid = new();
    private DeviceCollection _deviceCollection = new();
    private HubConnection? _hubConnection;

    async Task ShowDeviceDetails(Device device)
    {
        await _dialogService.OpenAsync<DialogCardPage>($"Device {device.Id}", new Dictionary<string, object> { { "Device", device }, }, new DialogOptions { Width = "700px", Height = "530px", });
    }

    // Might want to cache this data to avoid excessive network traffic
    // Can refresh this list manually with a button
    protected override async Task OnInitializedAsync()
    {
        _hubConnection = new HubConnectionBuilder()
            .WithUrl(_navigationManager.ToAbsoluteUri("/devicehub"))
            .Build();

        _hubConnection.On<DeviceCollection>("GetDevices", deviceCollection =>
        {
            _deviceCollection = deviceCollection;
            StateHasChanged();
        });

        await _hubConnection.StartAsync();
        await _hubConnection.SendAsync("SendDeviceQuery");
    }

    private async Task Send()
    {
        await _hubConnection.SendAsync("SendDeviceQuery");
    }

    private bool IsConnected =>
        _hubConnection?.State == HubConnectionState.Connected;

    public async ValueTask DisposeAsync()
    {
        if (_hubConnection is not null)
        {
            await _hubConnection.DisposeAsync();
        }
    }

}